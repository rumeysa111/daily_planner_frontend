import 'package:dio/dio.dart';

import '../models/todo_model.dart';

class TodoService {
  final Dio _dio = Dio(BaseOptions(
          baseUrl:
              "http://192.168.0.105:3000/api/todos") // ðŸ“Œ Backend URL'ini ekledik
      );

  Future<List<TodoModel>> fetchTodos(String token, {String? category}) async {
    try {
      print("ðŸ“Œ Backend'den gÃ¶revler Ã§ekiliyor...");

      final response = await _dio.get(
        '/',
        options: Options(headers: {"Authorization": "Bearer $token"}),
        queryParameters: category != null && category != "TÃ¼mÃ¼"
            ? {"category": category}
            : {},
      );
      print("âœ… Backend'den Gelen YanÄ±t: ${response.data}");

      if (response.data is List) {
        return (response.data as List)
            .map<TodoModel>((json) => TodoModel.fromJson(json))
            .toList();
      } else {
        print("ðŸš¨ GeÃ§ersiz veri formatÄ±: ${response.data}");
        return [];
      }
    } catch (e) {
      print("ðŸš¨ Hata: $e");
      return [];
    }
  }

  //seÃ§ili gÃ¼ne gÃ¶re gÃ¶revleri getir
  Future<List<TodoModel>> fetchTodosByDate(
      String token, DateTime selectedDate) async {
    try {
      final response = await _dio.get(
        '/by-date', //yeni endpoint
        options: Options(headers: {"Authorization": "Bearer $token"}),
        queryParameters: {"date": selectedDate.toIso8601String().split("T")[0]},
      );
      return response.data
          .map<TodoModel>((json) => TodoModel.fromJson(json))
          .toList();
    } catch (e) {
      print("seÃ§ili tarig iÃ§in gÃ¶revleri Ã§ekerken hata oluÅŸtur $e");
      return [];
    }
  }

  Future<bool> addTodo(String token, TodoModel todo) async {
    try {
      print("ðŸ“Œ Flutter'dan Backend'e GÃ¶nderilen JSON: ${todo.toJson()}");

      final response = await _dio.post(
        '/',
        data: todo.toJson(),
        options: Options(headers: {"Authorization": "Bearer $token"}),
      );

      print("âœ… Backend'den dÃ¶nen yanÄ±t: ${response.data}");

      return response.statusCode == 201;
    } catch (e) {
      print("ðŸš¨ Backend'e gÃ¶rev ekleme hatasÄ±: $e");
      return false;
    }
  }

  Future<bool> updateTodo(String token, String id, TodoModel todo) async {
    try {
      await _dio.put(
        '/$id',
        data: todo.toJson(),
        options: Options(headers: {"Authorization": "Bearer $token"}),
      );
      return true;
    } catch (e) {
      print("GÃ¼ncelleme HatasÄ±: $e");
      return false;
    }
  }

  Future<bool> deleteTodo(String token, String id) async {
    try {
      await _dio.delete(
        '/$id',
        options: Options(headers: {"Authorization": "Bearer $token"}),
      );
      return true;
    } catch (e) {
      print("Silme HatasÄ±: $e");
      return false;
    }
  }
}
