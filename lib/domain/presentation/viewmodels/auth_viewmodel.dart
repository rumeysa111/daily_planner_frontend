// ğŸ“Œ Riverpod kÃ¼tÃ¼phanesini iÃ§e aktarÄ±yoruz (State management iÃ§in gerekli)
import 'package:flutter_riverpod/flutter_riverpod.dart';

// ğŸ“Œ KullanÄ±cÄ± modelini iÃ§e aktarÄ±yoruz (UserModel, giriÅŸ yapan kullanÄ±cÄ±nÄ±n bilgilerini saklar)

// ğŸ“Œ AuthService, backend ile iletiÅŸimi saÄŸlayan servis (API isteklerini yÃ¶netir)
import 'package:mytodo_app/data/repositories/auth_service.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../../../data/models/user_model.dart';
import 'category_viewmodel.dart';

// ğŸ“Œ AuthViewModel, kullanÄ±cÄ± giriÅŸ-Ã§Ä±kÄ±ÅŸ durumunu yÃ¶netir ve UI ile AuthService arasÄ±nda kÃ¶prÃ¼ kurar
class AuthViewModel extends StateNotifier<UserModel?> {
  // ğŸ“Œ AuthService Ã¶rneÄŸini tanÄ±mlÄ±yoruz (API isteklerini yÃ¶netecek)
  final AuthService _authService;
  final Ref ref; // **âœ… Riverpod ref ekledik**

  // ğŸ“Œ Constructor (BaÅŸlatÄ±cÄ±), AuthService'i alÄ±r ve baÅŸlangÄ±Ã§ state'ini null yapar
  AuthViewModel(this._authService,this.ref) : super(null) {
    _loadUser();
  }
  /// **ğŸ“Œ KullanÄ±cÄ± giriÅŸ yaptÄ±ysa bilgileri local storage'dan al**
  Future<void> _loadUser() async {
    final prefs = await SharedPreferences.getInstance();
    final String? token = prefs.getString("token");

    if (token != null) {
      // **âœ… Backend'den token ile kullanÄ±cÄ± bilgilerini Ã§ek**
      final user = await _authService.getUser(token);

      if (user != null) {
        state = user;
        print("âœ… KullanÄ±cÄ± baÅŸarÄ±yla yÃ¼klendi: ${user.toJson()}");

        // **âœ… KullanÄ±cÄ± giriÅŸ yaptÄ±ysa kategorileri getir**
        ref.read(categoryProvider.notifier).reloadCategories();
      }
    }
  }
  // ğŸ“Œ KullanÄ±cÄ± giriÅŸ yapma fonksiyonu
  Future<bool> login(String email, String password) async {
    // ğŸ“Œ AuthService ile giriÅŸ API isteÄŸini yapÄ±yoruz
    final user = await _authService.login(email, password);

    // ğŸ“Œ EÄŸer kullanÄ±cÄ± bilgisi geldiyse (GiriÅŸ baÅŸarÄ±lÄ±)
    if (user != null) {
      print("âœ… KullanÄ±cÄ± giriÅŸ yaptÄ±: ${user.toJson()}");

      state = user;
      //tokenÄ± kaydet
      final prefs=await SharedPreferences.getInstance();
      await prefs.setString("token", user.token);
      await prefs.setString("userId", user.id);
      print("âœ… KullanÄ±cÄ± ID Kaydedildi: ${user.id}");

      // **âœ… KullanÄ±cÄ± giriÅŸ yaptÄ±ktan sonra kategorileri getir**
      ref.read(categoryProvider.notifier).reloadCategories();
      return true;
    }

    return false; // ğŸ“Œ GiriÅŸ baÅŸarÄ±sÄ±zsa false dÃ¶ndÃ¼rÃ¼yoruz
  }

  // ğŸ“Œ KullanÄ±cÄ± kayÄ±t olma fonksiyonu
  Future<bool> register(String name,String surname, String email, String password) async {
    // ğŸ“Œ AuthService iÃ§indeki register fonksiyonunu Ã§aÄŸÄ±rarak API'ye istek gÃ¶nderiyoruz
    return await _authService.register(name,surname, email, password);
  }

  // ğŸ“Œ KullanÄ±cÄ± Ã§Ä±kÄ±ÅŸ yapma fonksiyonu
   Future<void> logout()async {
    state=null;
    final prefs= await SharedPreferences.getInstance();
    await prefs.remove("token");
    await prefs.remove("userId");
    // **âœ… Ã‡Ä±kÄ±ÅŸ yapÄ±nca kategori listesini temizle**
    ref.read(categoryProvider.notifier).clearCategories();
  }
}

// ğŸ“Œ Riverpod Provider tanÄ±mlamasÄ±
// ğŸ“Œ StateNotifierProvider, AuthViewModel'in durumunu yÃ¶netir ve UI ile baÄŸlantÄ±yÄ± saÄŸlar
final authProvider = StateNotifierProvider<AuthViewModel, UserModel?>((ref) {
  return AuthViewModel(AuthService(),ref); // ğŸ“Œ AuthViewModel'in bir Ã¶rneÄŸini oluÅŸturuyoruz
});
