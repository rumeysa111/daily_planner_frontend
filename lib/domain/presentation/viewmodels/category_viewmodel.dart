// ignore_for_file: avoid_print

import 'package:flutter/foundation.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:mytodo_app/data/repositories/category_service.dart';
import 'package:shared_preferences/shared_preferences.dart';

import '../../../data/models/category_model.dart';

class CategoryViewModel extends StateNotifier<List<CategoryModel>> {
  final CategoryService _categoryService;
  String selectedCategoryId = ""; // VarsayÄ±lan olarak seÃ§ili kategori yok

  CategoryViewModel(this._categoryService) : super([]) {
    fetchCategories();
  }

  ///  KullanÄ±cÄ±nÄ±n kategorilerini Ã§ek
  Future<void> fetchCategories() async {
    final prefs = await SharedPreferences.getInstance();
    String? userId = prefs.getString("userId");

    if (userId == null) {
      if (kDebugMode) {
        print(" KullanÄ±cÄ± giriÅŸ yapmamÄ±ÅŸ! Kategoriler yÃ¼klenemedi.");
      }
      return;
    }
    print(" KullanÄ±cÄ±nÄ±n kategorileri yÃ¼kleniyor: $userId"); // âœ… Debug

    try {
      final categories = await _categoryService.fetchCategories(userId);
      state = categories; // âœ… Backendâ€™den gelen kategorileri UIâ€™a aktar
      if (kDebugMode) {
        print("âœ… ${categories.length} kategori yÃ¼klendi.");
      }
    } catch (e) {
      print(" Kategorileri Ã§ekerken hata oluÅŸtu: $e");
    }
  }

  void reloadCategories() {
    fetchCategories(); // âœ… KullanÄ±cÄ± deÄŸiÅŸirse yeniden yÃ¼kle
  }

  ///  Yeni kategori ekle
  Future<bool> addCategory(CategoryModel category) async {
    try {
      // SharedPreferences'dan userId'yi al
      final prefs = await SharedPreferences.getInstance();
      String? userId = prefs.getString("userId");

      if (userId == null) {
        print("ğŸš¨ KullanÄ±cÄ± ID'si bulunamadÄ±!");
        return false;
      }

      // Kategori nesnesini userId ile gÃ¼ncelle
      final categoryWithUserId = CategoryModel(
        id: category.id,
        name: category.name,
        icon: category.icon,
        color: category.color,
        userId: userId, // KullanÄ±cÄ± ID'sini ekle
      );

      // GÃ¼ncellenmiÅŸ kategoriyi backende gÃ¶nder
      bool success = await _categoryService.addCategory(categoryWithUserId);
      if (success) {
        await fetchCategories(); // TÃ¼m kategorileri yeniden yÃ¼kle
        return true;
      }
      return false;
    } catch (e) {
      print(" Kategori ekleme hatasÄ±: $e");
      return false;
    }
  }

  ///  Kategori gÃ¼ncelle
  Future<bool> updateCategory(
      String categoryId, CategoryModel updatedCategory) async {
    try {
      bool success =
          await _categoryService.updateCategory(categoryId, updatedCategory);
      if (success) {
        await fetchCategories(); // TÃ¼m kategorileri yeniden yÃ¼kle
        return true;
      }
      return false;
    } catch (e) {
      print(" Kategori gÃ¼ncelleme hatasÄ±: $e");
      return false;
    }
  }

  ///  Kategori sil
  Future<void> deleteCategory(String categoryId) async {
    bool success = await _categoryService.deleteCategory(categoryId);
    if (success) {
      state = state.where((cat) => cat.id != categoryId).toList();
    }
  }

  ///  KullanÄ±cÄ± Ã§Ä±kÄ±ÅŸ yaptÄ±ÄŸÄ±nda kategorileri temizle**
  void clearCategories() {
    state = [];
  }

  /// SeÃ§ili kategoriyi ayarla
  void setCategory(String categoryId) {
    selectedCategoryId = categoryId;
    state = [...state]; // UI gÃ¼ncellemek iÃ§in state deÄŸiÅŸtirme
  }
}

