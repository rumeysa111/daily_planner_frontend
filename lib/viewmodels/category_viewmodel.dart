import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:mytodo_app/models/category_model.dart';
import 'package:mytodo_app/services/category_service.dart';
import 'package:shared_preferences/shared_preferences.dart';

class CategoryViewModel extends StateNotifier<List<CategoryModel>> {
  final CategoryService _categoryService;
  String selectedCategoryId = ""; // VarsayÄ±lan olarak seÃ§ili kategori yok

  CategoryViewModel(this._categoryService) : super([]) {
    fetchCategories();
  }

  /// âœ… KullanÄ±cÄ±nÄ±n kategorilerini Ã§ek
  Future<void> fetchCategories() async {
    final prefs = await SharedPreferences.getInstance();
    String? userId = prefs.getString("userId");

    if (userId == null) {
      print("ğŸš¨ KullanÄ±cÄ± giriÅŸ yapmamÄ±ÅŸ! Kategoriler yÃ¼klenemedi.");
      return;
    }
    print("ğŸ“¢ KullanÄ±cÄ±nÄ±n kategorileri yÃ¼kleniyor: $userId"); // âœ… Debug

    try {
      final categories = await _categoryService.fetchCategories(userId);
      state = categories; // âœ… Backendâ€™den gelen kategorileri UIâ€™a aktar
      print("âœ… ${categories.length} kategori yÃ¼klendi.");
    } catch (e) {
      print("ğŸš¨ Kategorileri Ã§ekerken hata oluÅŸtu: $e");
    }
  }
  void reloadCategories() {
    fetchCategories(); // âœ… KullanÄ±cÄ± deÄŸiÅŸirse yeniden yÃ¼kle
  }

  /// âœ… Yeni kategori ekle
  Future<void> addCategory(CategoryModel category) async {
    bool success = await _categoryService.addCategory(category);
    if (success) {
      state = [...state, category]; // âœ… Yeni kategoriyi listeye ekle
    }
  }

  /// âœ… Kategori gÃ¼ncelle
  Future<void> updateCategory(String categoryId, CategoryModel updatedCategory) async {
    bool success = await _categoryService.updateCategory(categoryId, updatedCategory);
    if (success) {
      state = state.map((cat) => cat.id == categoryId ? updatedCategory : cat).toList();
    }
  }

  /// âœ… Kategori sil
  Future<void> deleteCategory(String categoryId) async {
    bool success = await _categoryService.deleteCategory(categoryId);
    if (success) {
      state = state.where((cat) => cat.id != categoryId).toList();
    }
  }
  /// **ğŸ“Œ KullanÄ±cÄ± Ã§Ä±kÄ±ÅŸ yaptÄ±ÄŸÄ±nda kategorileri temizle**
  void clearCategories() {
    state = [];
  }


  /// âœ… SeÃ§ili kategoriyi ayarla
  void setCategory(String categoryId) {
    selectedCategoryId = categoryId;
    state = [...state]; // UI gÃ¼ncellemek iÃ§in state deÄŸiÅŸtirme
  }
}

/// ğŸ“Œ Riverpod Provider
final categoryProvider = StateNotifierProvider<CategoryViewModel, List<CategoryModel>>((ref) {
  return CategoryViewModel(CategoryService());
});
